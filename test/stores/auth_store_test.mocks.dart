// Mocks generated by Mockito 5.4.3 from annotations
// in economiza_sc/test/stores/auth_store_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:economiza_sc/models/user.dart' as _i2;
import 'package:economiza_sc/services/auth_service.dart' as _i3;
import 'package:economiza_sc/services/snack_bar_service.dart' as _i5;
import 'package:flutter/material.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i3.AuthService {
  @override
  _i4.Future<_i2.User> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i4.Future<_i2.User>);

  @override
  _i4.Future<_i2.User> fetchCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #fetchCurrentUser,
          [],
        ),
        returnValue: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #fetchCurrentUser,
            [],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #fetchCurrentUser,
            [],
          ),
        )),
      ) as _i4.Future<_i2.User>);

  @override
  _i4.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getApiToken() => (super.noSuchMethod(
        Invocation.method(
          #getApiToken,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
        returnValueForMissingStub: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
}

/// A class which mocks [SnackBarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSnackBarService extends _i1.Mock implements _i5.SnackBarService {
  @override
  _i4.Future<_i6.SnackBarClosedReason> show(
    String? text, {
    Duration? duration = const Duration(seconds: 3),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #show,
          [text],
          {#duration: duration},
        ),
        returnValue: _i4.Future<_i6.SnackBarClosedReason>.value(
            _i6.SnackBarClosedReason.action),
        returnValueForMissingStub: _i4.Future<_i6.SnackBarClosedReason>.value(
            _i6.SnackBarClosedReason.action),
      ) as _i4.Future<_i6.SnackBarClosedReason>);
}
